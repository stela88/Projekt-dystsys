import json
import asyncio
import aiofiles
import aiohttp
import aiosqlite
from aiohttp import web

routes = web.RouteTableDef()


@routes.get("/JsonData")
async def json_data(request):
    try:
        async with aiofiles.open('file-000000000040.json', mode='r') as file_data:

            read_data = {await file_data.readline() for _ in range(10)}
            whole_data = [json.loads(line) for line in read_data]

            database = []
            for item in whole_data:
                db_item = {}
                db_item["repo_name"] = item["repo_name"]
                db_item["path"] = item["path"]
                db_item["copies"] = item["copies"]
                db_item["size"] = item["size"]
                db_item["content"] = item["content"]
                db_item["hash"] = item["hash"]
                db_item["line_mean"] = item["line_mean"]
                db_item["line_max"] = item["line_max"]
                db_item["alpha_frac"] = item["alpha_frac"]
                db_item["autogenerated"] = item["autogenerated"]
                database.append(db_item)

                async with aiosqlite.connect("database.db") as db:
                    await db.execute(
                        "INSERT INTO json_data (repo_name, path, copies, size, content, hash, line_mean, line_max, alpha_frac, autogenerated) VALUES (?,?,?,?,?,?,?,?,?,?)",
                        (
                            db_item["repo_name"], db_item["path"], db_item["copies"], db_item["size"],
                            db_item["content"], db_item["hash"], db_item["line_mean"], db_item["line_max"],
                            db_item["alpha_frac"], db_item["autogenerated"]))
                    await db.commit()

                    async with aiosqlite.connect("database.db") as db:
                        async with db.execute("SELECT * FROM json_data") as cur:
                            print("Every row in DB : ", await cur.fetchall())
                            result = len(await cur.fetchall())
                    message = {"status": "ok", "data": {"numberOfRowsInTable": result}}

                    return web.json_response(message, status=200)

        return web.json_response(database, status=200)





    except Exception as e:
        return web.json_response({"Error": str(e)}, status=500)


app = web.Application()
app.router.add_routes(routes)
web.run_app(app, port=8081)

"""""
conn = sqlite3.connect('database.db')
cursor = conn.cursor()


cursor.execute("SELECT COUNT(*) FROM baza_projekt")
count1 = cursor.fetchone()[0]


if count1 == 0:
    print("The database is empty.")
else:
    print("The database is not empty.")


query = 'SELECT id,username,ghlink,filename FROM baza_projekt'

results = cursor.execute(query)

for row in results:
    print(row)

conn.close()
"""
