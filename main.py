import json
import asyncio
import aiofiles
import aiohttp
from aiohttp import web

routes = web.RouteTableDef()

routes = web.RouteTableDef()


@routes.get("/JsonData")
async def json_data(request):
    try:
        async with aiofiles.open('file-000000000040.json', mode='r') as file_data:

            read_data = {await file_data.readline() for _ in range(10)}
            whole_data = [json.loads(line) for line in read_data]

            database = []
            for item in whole_data:
                db_item = {}
                db_item["repo_name"] = item["repo_name"]
                db_item["path"] = item["path"]
                db_item["copies"] = item["copies"]
                db_item["size"] = item["size"]
                db_item["content"] = item["content"]
                db_item["hash"] = item["hash"]
                db_item["line_mean"] = item["line_mean"]
                db_item["line_max"] = item["line_max"]
                db_item["alpha_frac"] = item["alpha_frac"]
                db_item["autogenerated"] = item["autogenerated"]
                database.append(db_item)

        return web.json_response(database, status=200)

    except Exception as e:
        return web.json_response({"Error": str(e)}, status=500)

app = web.Application()
app.router.add_routes(routes)
web.run_app(app, port=8081)


"""""
conn = sqlite3.connect('database.db')
cursor = conn.cursor()


cursor.execute("SELECT COUNT(*) FROM baza_projekt")
count1 = cursor.fetchone()[0]


if count1 == 0:
    print("The database is empty.")
else:
    print("The database is not empty.")


query = 'SELECT id,username,ghlink,filename FROM baza_projekt'

results = cursor.execute(query)

for row in results:
    print(row)

conn.close()
"""


